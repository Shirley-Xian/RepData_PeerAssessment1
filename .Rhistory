req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
GET("http://biostat.jhsph.edu/~jleek/contact.html")
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
htmlCode[1]
source('D:/Shirley/R/Clean data/ReadHTML.R')
GET("http://biostat.jhsph.edu/~jleek/contact.html")
content(GET("http://biostat.jhsph.edu/~jleek/contact.html"))
content(GET("http://biostat.jhsph.edu/~jleek/contact.html"))[1]
readLines(url("http://biostat.jhsph.edu/~jleek/contact.html"))
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadHTML.R')
source('D:/Shirley/R/Clean data/ReadOthers.R')
source('D:/Shirley/R/Clean data/ReadOthers.R')
View(htmlCode)
View(htmlCode)
source('D:/Shirley/R/Clean data/ReadOthers.R')
source('D:/Shirley/R/Clean data/ReadOthers.R')
source('D:/Shirley/R/Clean data/ReadOthers.R')
View(htmlCode)
source('D:/Shirley/R/Clean data/ReadOthers.R')
source('D:/Shirley/R/Clean data/ReadOthers.R')
source('d:/Shirley/R/Clean data/oauth2-github.r')
source('d:/Shirley/R/Clean data/oauth2-github.r')
content(req)
source('d:/Shirley/R/Clean data/oauth2-github.r')
source('d:/Shirley/R/Clean data/oauth2-github.r')
jsonlite::fromJSON(content(req))
source('d:/Shirley/R/Clean data/oauth2-github.r')
source('d:/Shirley/R/Clean data/oauth2-github.r')
View(json2)
View(json2)
json2[1,1:4]
View(json2)
json2[["name"]]
json2["name"="datasharing"]
source('d:/Shirley/R/Clean data/oauth2-github.r')
json1
names(json1)
names(json2)
json2(,{2,46})
json2(,2)
json2[json2$name="datasharing"]
json2[json2$name=="datasharing"]
json2[["name"]]=="datasharing"
json2[json2[["name"]]=="datasharing"]
source('d:/Shirley/R/Clean data/oauth2-github.r')
View(x)
source('d:/Shirley/R/Clean data/oauth2-github.r')
source('d:/Shirley/R/Clean data/oauth2-github.r')
source('d:/Shirley/R/Clean data/oauth2-github.r')
source('d:/Shirley/R/Clean data/oauth2-github.r')
source('d:/Shirley/R/Clean data/oauth2-github.r')
library(swirl)
swirl()
2
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z *2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- my_sqrt/z
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z *2+1000
my_div
1:20
pi:10
15ï¼š1
15:1
?':'
sqe(1,20)
seq(1:10)
seq(1:20)
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My","name","is")
my_char
paste0(my_char,collapse = " ")
paste(my_char,collapse = " ")
my_name <- c(my_char,"Shirley")
my_name
paste(my_name)
paste(my_name,collapse = " ")
paste("Hello","world!",sep = " ")
paste(c("X", "Y", "Z"),sep = "")
paste(1:3,c("X", "Y", "Z"),sep = "")
paste(LETTERS,1:4,sep = "-")
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("dplyr")
install.packages("C:/Users/ASUS123/AppData/Local/Temp/Rtmp0QvsPw/downloaded_packages/dplyr_0.4.3.zip", repos = NULL, type = "win.binary")
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == false
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 = 10
10 <= 10
5!= 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 >8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical("twins","twins")
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints>5
which(ints > 7)
any(ints <= 0)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num =5)
remainder(4,div = 2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6
)
evaluate(function(x){x[1]})
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun")
paste("Programming","is","fun!")
submit()
telegram("tedfsa")
submit()
submit()
mad_libs(place = "home", adjective = "me", noun = "S")
submit()
submit()
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d,%Y %H:%M")
strptime(t3,"%B %d, %Y %H:%M")
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1, units = "days")
library(datasets)
data(iris)
?iris
source('d:/Shirley/R/R Programming/Quiz3.R')
View(iris)
mean(iris[iris$Species == "virginica",1])
source('d:/Shirley/R/R Programming/Quiz3.R')
apply(iris[, 1:4], 2, mean)
source('d:/Shirley/R/R Programming/Quiz3.R')
?mtcars
mtcars
View(mtcars)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
library(swirl)
swirl()
swirl()
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_course_url("https://github.com/swirldev/swirl_courses/tree/master/Exploratory_Data_Analysis")
install_course_url("https://github.com/swirldev/swirl_courses/tree/master/Exploratory_Data_Analysis")
swirl()
install.packages("ggplot2")
install.packages("ggplot2")
swirl()
install.packages("ggplot2")
swirl()
swirl()
install.packages("colorspace")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(pollution$pm25)
quantile(ppm)
boxplot(ppm,col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg,col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mforw = c(2,1),mar = c(4,4,2,1) )
par(mfrow = c(2,1),mar = c(4,4,2,1) )
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution, region == "west")$pm25, col="green")
plot(poluttion, )
plot(pollution, )
with(pollution, plot(latitude, pm25))
abline(h=12, lty = 2,owd=2 )
abline(h=12, lty = 2,lwd=2 )
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h = 12, lwd=2, lty=2)
par(mfrow=c(1,2,mar=(5,4,2,1)))
par(mfrow=c(1,2),mar=(5,4,2,1))
par(mfrow=c(1,2),mar=c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
swirl()
library(swirl)
swirl()
0
library(swirl)
swirl()
qplot(-displ,hwy,data = mpg, geom = c("point","smooth"),facets = .~drv, method = "loess")
?qplot
qplot(-displ,hwy,data = mpg, geom = c("point","smooth"),facets = .~drv)
qplot(displ,hwy,data = mpg, geom = c("point","smooth"),facets = .~drv)
g <- ggplot(mpg,aes(displ,hwy) )
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv)) + labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(size=2,alpha=1/2,aes(color=drv))+geom_smooth(size=4, linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g <- ggplot(testdat,aes(x=myx,y=myy))
g+geom_line(0)
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(yylim = c(-3,3))
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg,aes(x=displ,y=hwy,color=factor(year)))
a + geom_point()
g + geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+ geom_smooth(method="lm",se=FALSE,size=2,color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+ geom_smooth(method="lm",se=FALSE,size=2,color="black") + labs(x="Displacement,y="Highway Mileage,title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+ geom_smooth(method="lm",se=FALSE,size=2,color="black") + labs(x="Displacement,y="Highway Mileage"",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+ geom_smooth(method="lm",se=FALSE,size=2,color="black") + labs(x="Displacement",y="Highway Mileage"",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+ geom_smooth(method="lm",se=FALSE,size=2,color="black") + labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
library(swirl)
swirl()
str(mgp)
str(mpp)
str(mpg)
q()
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svn(mat)
svd(mat)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcom(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
library(swirl)
swirl()
swirl()
2
swirl()
svd2$v
svd2$v[,1:2]
svd2.d
svd2.d()
svd2$d
dim(faceData)
a1 <- svd1$u%*%svd1$d%*%svd1$v
a1 <- svd1$u %*% svd1$d %*% svd1$v
a1 <- svd1$u %*% svd1$d %*% t(svd1$v)
a1 <- svd1$u %*% svd1$d
a1 <-(svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2<- svd1$u %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2<- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,pch=8,cex=2,lwd=2,col=cols1)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,pch=9,cex=2,lwd=2,col=cols1)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=2,lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
points(x,y,col=kmeans(dataFrame,6)$cluser,pch=3,cex=19,lwd=2)
points(x,y,col=kmeans(dataFrame,6)$cluster,pch=3,cex=19,lwd=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=3,cex=19,lwd=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
tableï¼ˆssd$activity
tableï¼ˆssd$activity)
table(ssd$activity)
sub1<-subset(ssd,subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist<- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12]))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12],maxCon)
)
mdist <- dist(c(sub1[,10:12],maxCon))
mdist <- dist(sub1[,c(10:12,maxCon]))
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust((mmdist))
hclustering <- hclust((mdist))
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-(562:563]),centers =6)
kClust <- kmeans(sub1[,-(562:563)],centers =6)
kClust <- kmeans(sub1[,-(562,563)],centers =6)
kClust <- kmeans(sub1[,-c(562,563)],centers =6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)],centers =6,nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1,)
names(sub1)
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
setwd("d:/Shirley/R/Reproducible Research/RepData_PeerAssessment1")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
